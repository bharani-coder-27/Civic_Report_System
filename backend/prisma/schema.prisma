// This is your Prisma schema file, 
// learn more about it in the docs: https://pris.ly/d/prisma-schema 
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions? 

// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------- ENUMS ----------------
enum UserRole {
  citizen
  staff
  admin
}

enum ReportStatus {
  submitted
  acknowledged
  in_progress
  resolved
  rejected
}

enum FileType {
  image
  video
  audio
}

enum NotifStatus {
  pending
  delivered
  read
}

// ---------------- MODELS ----------------
model User {
  user_id       String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String   @db.VarChar(100)
  email         String?  @unique @db.VarChar(100)
  phone         String?  @unique @db.VarChar(20)
  password_hash String   @db.VarChar(255)
  role          UserRole @default(citizen)
  created_at    DateTime @default(now())

  reports       Report[]
  notifications Notification[]
  staffProfile  Staff?
}

model Department {
  dept_id   String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String  @db.VarChar(50)
  email     String  @unique @db.VarChar(100)
  phone     String? @unique @db.VarChar(20)

  staff     Staff[]
  reports   Report[]
}

model District {
  district_id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String  @unique @db.VarChar(100)

  zones       Zone[]
}

model Zone {
  zone_id     String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  district_id String   @db.Uuid
  name        String   @db.VarChar(50)

  district District @relation(fields: [district_id], references: [district_id], onDelete: Cascade)
  wards     Ward[]
}

model Ward {
  ward_id   String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  zone_id   String   @db.Uuid
  name      String   @db.VarChar(50)
  ward_no   Int      @unique     // useful for mapping GeoJSON

  zone      Zone   @relation(fields: [zone_id], references: [zone_id], onDelete: Cascade)
  reports   Report[]
  staffWards StaffWards[]
}


model Staff {
  staff_id  String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id   String   @unique @db.Uuid
  dept_id   String?  @db.Uuid
  position  String?  @db.VarChar(30)

  user       User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  department Department? @relation(fields: [dept_id], references: [dept_id], onDelete: SetNull)
  staffWards StaffWards[]
  statusChanges StatusHistory[]
}

model StaffWards {
  id       String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  staff_id String @db.Uuid
  ward_id  String @db.Uuid

  staff    Staff @relation(fields: [staff_id], references: [staff_id], onDelete: Cascade)
  ward     Ward  @relation(fields: [ward_id], references: [ward_id], onDelete: Cascade)

  @@unique([staff_id, ward_id])
}

model Report {
  report_id   String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String?  @db.Uuid
  dept_id     String?  @db.Uuid
  ward_id     String?  @db.Uuid
  category    String   @db.VarChar(50)
  description String

  latitude    Decimal  @db.Decimal(9,6)
  longitude   Decimal  @db.Decimal(9,6)

  status      ReportStatus @default(submitted)
  priority_score Int @default(2)

  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  anon_contact_email String? @db.VarChar(100)
  anon_contact_phone String? @db.VarChar(20)

  user       User?       @relation(fields: [user_id], references: [user_id], onDelete: SetNull)
  department Department? @relation(fields: [dept_id], references: [dept_id], onDelete: SetNull)
  ward       Ward?       @relation(fields: [ward_id], references: [ward_id], onDelete: SetNull)
  media      Media[]
  history    StatusHistory[]
  notifications Notification[]
}

model Media {
  media_id   String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  report_id  String @db.Uuid
  file_url   String @db.VarChar(255)
  file_type  FileType
  uploaded_at DateTime @default(now())

  report     Report @relation(fields: [report_id], references: [report_id], onDelete: Cascade)
}

model StatusHistory {
  history_id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  report_id  String @db.Uuid
  old_status ReportStatus
  new_status ReportStatus
  changed_by String? @db.Uuid
  notes      String?
  changed_at DateTime @default(now())

  report     Report @relation(fields: [report_id], references: [report_id], onDelete: Cascade)
  staff      Staff?  @relation(fields: [changed_by], references: [staff_id], onDelete: SetNull)
}

model Notification {
  notif_id   String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String? @db.Uuid
  report_id  String @db.Uuid
  message    String
  status     NotifStatus @default(pending)
  created_at DateTime @default(now())

  user       User?   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  report     Report  @relation(fields: [report_id], references: [report_id], onDelete: Cascade)
}
